"(docol)",
"(docon)",
"(dovar)",
"(douser)",
"(dodefer)",
"(dofield)",
"(dovalue)",
"(dodoes)",
"(doabicode)",
"(do;abicode)",
GROUPADD(10)
GROUP( control, 10)
"noop",
"call",
"execute",
"perform",
";s",
"execute-;s",
"unloop",
"lit-perform",
"does-xt",
GROUPADD(9)
#ifdef HAS_GLOCALS
"branch-lp+!#",
GROUPADD(1)
#endif
"branch",
"?branch",
GROUPADD(2)
#ifdef HAS_GLOCALS
"?branch-lp+!#",
GROUPADD(1)
#endif
GROUPADD(0)
#ifdef HAS_XCONDS
"?dup-?branch",
"?dup-0=-?branch",
GROUPADD(2)
#endif
"(next)",
GROUPADD(1)
#ifdef HAS_GLOCALS
"(next)-lp+!#",
GROUPADD(1)
#endif
"(loop)",
GROUPADD(1)
#ifdef HAS_GLOCALS
"(loop)-lp+!#",
GROUPADD(1)
#endif
"(+loop)",
GROUPADD(1)
#ifdef HAS_GLOCALS
"(+loop)-lp+!#",
GROUPADD(1)
#endif
GROUPADD(0)
#ifdef HAS_XCONDS
"(-loop)",
GROUPADD(1)
#ifdef HAS_GLOCALS
"(-loop)-lp+!#",
GROUPADD(1)
#endif
"(/loop)",
GROUPADD(1)
#ifdef HAS_GLOCALS
"(/loop)-lp+!#",
GROUPADD(1)
#endif
"(s+loop)",
GROUPADD(1)
#ifdef HAS_GLOCALS
"(s+loop)-lp+!#",
GROUPADD(1)
#endif
GROUPADD(0)
#endif
"(for)",
"(do)",
"(?do)",
GROUPADD(3)
#ifdef HAS_XCONDS
"(+do)",
"(u+do)",
"(-do)",
"(u-do)",
"(-[do)",
"(u-[do)",
"(try)",
"uncatch",
"fast-throw",
GROUPADD(9)
#endif
"i",
"i'",
"j",
"k",
"bounds",
"delta-i",
"r'@",
"rpick#",
GROUPADD(8)
GROUP( strings, 57)
"move",
"cmove",
"cmove>",
"fill",
"compare",
"toupper",
"capscompare",
"/string",
"safe/string",
GROUPADD(9)
GROUP( arith, 66)
"lit",
"+",
"lit+",
"under+",
"-",
"negate",
"1+",
"1-",
"max",
"min",
"abs",
"*",
"/f",
"modf",
"/modf",
"*/modf",
"*/f",
"/s",
"mods",
"/mods",
"*/mods",
"*/s",
"2*",
"2/",
"fm/mod",
"sm/rem",
"m*",
"um*",
"um/mod",
"u/-stage2m",
"umod-stage2m",
"u/mod-stage2m",
"/f-stage2m",
"modf-stage2m",
"/modf-stage2m",
"m+",
"d+",
"d-",
"dnegate",
"d2*",
"d2/",
"and",
"or",
"xor",
"invert",
"rshift",
"lshift",
"umax",
"umin",
"mux",
"select",
"dlshift",
"drshift",
"rol",
"ror",
"wrol",
"wror",
"lrol",
"lror",
"drol",
"dror",
"du/mod",
"u/",
"umod",
"u/mod",
"u*/mod",
"u*/",
"arshift",
"darshift",
GROUPADD(69)
GROUP( compare, 135)
"0=",
"0<>",
"0<",
"0>",
"0<=",
"0>=",
"=",
"<>",
"<",
">",
"<=",
">=",
"u=",
"u<>",
"u<",
"u>",
"u<=",
"u>=",
GROUPADD(18)
#ifdef HAS_DCOMPS
"d=",
"d<>",
"d<",
"d>",
"d<=",
"d>=",
"d0=",
"d0<>",
"d0<",
"d0>",
"d0<=",
"d0>=",
"du=",
"du<>",
"du<",
"du>",
"du<=",
"du>=",
GROUPADD(18)
#endif
"within",
GROUPADD(1)
GROUP( stack, 172)
"up!",
"sp@",
"sp!",
"rp@",
"rp!",
GROUPADD(5)
#ifdef HAS_FLOATING
"fp@",
"fp!",
GROUPADD(2)
#endif
">r",
"r>",
"rdrop",
"2>r",
"2r>",
"2r@",
"2rdrop",
"f>r",
"fr>",
"fr@",
"over",
"drop",
"swap",
"dup",
"rot",
"-rot",
"nip",
"tuck",
"?dup",
"pick",
"third",
"fourth",
"2drop",
"2dup",
"2over",
"2swap",
"2rot",
"2nip",
"2tuck",
"sps@",
GROUPADD(30)
GROUP( memory, 209)
"@",
"lit@",
"!",
"+!",
"c@",
"c!",
"2!",
"2@",
"cell+",
"cells",
"char+",
"count",
"cell/",
"cell-",
"inc#",
GROUPADD(15)
GROUP( compiler, 224)
GROUPADD(0)
#ifdef HAS_F83HEADERSTRING
"(f83find)",
GROUPADD(1)
#else /* 225 */
"(listlfind)",
GROUPADD(1)
#ifdef HAS_HASH
"(hashlfind)",
"(tablelfind)",
"(hashkey1)",
"(hashkey2)",
"hashkey2",
GROUPADD(5)
#endif
GROUPADD(0)
#endif
"(parse-white)",
"scan",
"skip",
"aligned",
"faligned",
"threading-method",
"debugging-method",
"die-on-signal",
GROUPADD(8)
GROUP( hostos, 239)
"(key-file)",
"key?-file",
"stdin",
"stdout",
"stderr",
"term-prep?",
GROUPADD(6)
#ifdef HAS_OS
"(form)",
"isatty",
"isfg",
"wcwidth",
"flush-icache",
"(bye)",
"(system)",
"getenv",
"open-pipe",
"close-pipe",
">time&date&tz",
"(ms)",
"heap-allocate",
"heap-free",
"heap-resize",
"strerror",
"strsignal",
"call-c",
"call-c#",
"call-c@",
"gforth-pointers",
"winch?",
GROUPADD(22)
#endif
GROUPADD(0)
#ifdef HAS_FILE
"close-file",
"open-file",
"create-file",
"delete-file",
"rename-file",
"file-position",
"reposition-file",
"file-size",
"resize-file",
"read-file",
"(read-line)",
GROUPADD(11)
#endif
"write-file",
"emit-file",
GROUPADD(2)
#ifdef HAS_FILE
"flush-file",
"file-status",
"file-eof?",
"open-dir",
"read-dir",
"close-dir",
"filename-match",
"set-dir",
"get-dir",
"=mkdir",
GROUPADD(10)
#endif
"newline",
GROUPADD(1)
#ifdef HAS_OS
"utime",
"cputime",
"ntime",
"(ns)",
GROUPADD(4)
#endif
GROUPADD(0)
#ifdef HAS_FLOATING
GROUPADD(0)
GROUP( floating, 295)
"f=",
"f<>",
"f<",
"f>",
"f<=",
"f>=",
"f0=",
"f0<>",
"f0<",
"f0>",
"f0<=",
"f0>=",
"s>f",
"d>f",
"f>d",
"f>s",
"f!",
"f@",
"df@",
"df!",
"sf@",
"sf!",
"f+",
"f-",
"f*",
"f/",
"f**",
"fm*",
"fm/",
"fm*/",
"f**2",
"fnegate",
"fdrop",
"fdup",
"fswap",
"fover",
"frot",
"fnip",
"ftuck",
"float+",
"floats",
"floor",
"fround",
"fmax",
"fmin",
"represent",
">float",
"fabs",
"facos",
"fasin",
"fatan",
"fatan2",
"fcos",
"fexp",
"fexpm1",
"fln",
"flnp1",
"flog",
"falog",
"fsin",
"fsincos",
"fsqrt",
"ftan",
"fsinh",
"fcosh",
"ftanh",
"fasinh",
"facosh",
"fatanh",
"sfloats",
"dfloats",
"sfaligned",
"dfaligned",
"v*",
"faxpy",
">float1",
"float/",
"dfloat/",
"sfloat/",
"f-rot",
"flit",
"flit0",
"flit1",
GROUPADD(83)
#endif
GROUPADD(0)
#ifdef HAS_GLOCALS
GROUPADD(0)
GROUP( locals, 378)
"@localn",
"@local0",
"@local1",
"@local2",
"@local3",
"@local4",
"@local5",
"@local6",
"@local7",
"!localn",
"!local0",
"!local1",
"!local2",
"!local3",
"!local4",
"!local5",
"!local6",
"!local7",
"+!localn",
"lp+n",
GROUPADD(20)
#ifdef HAS_FLOATING
"f@localn",
GROUPADD(1)
#endif
"lp@",
"lp+!",
"lp-",
"lp+",
"lp+2",
"lp!",
">l",
GROUPADD(7)
#ifdef HAS_FLOATING
"f>l",
"fpick",
"fthird",
"ffourth",
GROUPADD(4)
#endif
GROUPADD(0)
#endif
GROUPADD(0)
#ifdef HAS_OS
GROUPADD(0)
GROUP( syslib, 410)
"open-lib",
"open-lib2",
"lib-sym",
"lib-sym2",
"wcall",
"w@",
"w!",
"l@",
"l!",
"lib-error",
"close-lib",
"close-lib2",
GROUPADD(12)
#endif
GROUPADD(0)
GROUP( 64bit, 422)
GROUPADD(0)
#ifdef HAS_64BIT
"x!",
"x@",
GROUPADD(2)
#endif
GROUPADD(0)
GROUP( memory, 424)
"xd!",
"xd@",
"w><",
"l><",
"x><",
"xd><",
"c>s",
"w>s",
"l>s",
">pow2",
"log2",
"u8@+?",
GROUPADD(12)
GROUP( atomic, 436)
"!@",
"+!@",
"?!@",
"barrier",
GROUPADD(4)
GROUP( peephole, 440)
GROUPADD(0)
#ifdef HAS_PEEPHOLE
"forget-dyncode3",
"decompile-prim3",
"@decompile-prim",
"tag-offsets",
"compile-prims",
GROUPADD(5)
#endif
GROUPADD(0)
GROUP( primitive_centric, 445)
"abi-call",
";abi-code-exec",
"lit-execute",
GROUPADD(3)
GROUP( object_pointer, 448)
GROUPADD(0)
#ifdef HAS_OBJECTS
">o",
"o>",
"o#exec",
"x#exec",
"u#exec",
"u#+",
"up@",
"o",
"o+",
"!o+",
"@o+",
"sf!o+",
"sf@o+",
"o0",
"o1",
"o2",
"o3",
"o4",
"o5",
"o6",
"o7",
"o8",
"o9",
"o10",
"o11",
"o12",
"o13",
"o14",
"o15",
"o16",
"o17",
"o18",
"o19",
"o20",
"o21",
"o22",
"o23",
"o24",
"o25",
"o26",
"o27",
"o28",
"o29",
"o30",
"o31",
"!o0",
"!o1",
"!o2",
"!o3",
"!o4",
"!o5",
"!o6",
"!o7",
"!o8",
"!o9",
"!o10",
"!o11",
"!o12",
"!o13",
"!o14",
"!o15",
"@o0",
"@o1",
"@o2",
"@o3",
"@o4",
"@o5",
"@o6",
"@o7",
"@o8",
"@o9",
"@o10",
"@o11",
"@o12",
"@o13",
"@o14",
"@o15",
"sf!o0",
"sf!o1",
"sf!o2",
"sf!o3",
"sf!o4",
"sf!o5",
"sf!o6",
"sf!o7",
"sf!o8",
"sf!o9",
"sf!o10",
"sf!o11",
"sf!o12",
"sf!o13",
"sf!o14",
"sf!o15",
"sf!o16",
"sf!o17",
"sf!o18",
"sf!o19",
"sf!o20",
"sf!o21",
"sf!o22",
"sf!o23",
"sf!o24",
"sf!o25",
"sf!o26",
"sf!o27",
"sf!o28",
"sf!o29",
"sf!o30",
"sf!o31",
"sf@o0",
"sf@o1",
"sf@o2",
"sf@o3",
"sf@o4",
"sf@o5",
"sf@o6",
"sf@o7",
"sf@o8",
"sf@o9",
"sf@o10",
"sf@o11",
"sf@o12",
"sf@o13",
"sf@o14",
"sf@o15",
"sf@o16",
"sf@o17",
"sf@o18",
"sf@o19",
"sf@o20",
"sf@o21",
"sf@o22",
"sf@o23",
"sf@o24",
"sf@o25",
"sf@o26",
"sf@o27",
"sf@o28",
"sf@o29",
"sf@o30",
"sf@o31",
GROUPADD(141)
#endif
GROUPADD(0)
GROUP( static_super, 589)
GROUPADD(0)
GROUP( end, 589)
